string gcServer = "HanksSteeringComputer"


loadConnections()

os()

####

void os()
PlaySound("Coin 1")
Bar()
Print("Aniara OS v 3.5.0.1")
Print("* * * * * * * * * *")
Print("(C) J.L. et al, 1992 - now")
Print("Released under The GNU")
Print("General Public License v3.0")
Bar()

loop
    string cmd = Input("> ")
    string dir = "root"
    number id = -1

    if cmd == "cd"
        Print("ROOT")
    else if cmd == "h" or cmd == "help"
        Print("Available commands:")
        Print(" - connect [-v]")
        Print(" - store")
        Print(" - restore")
        Print(" - list")
        Print(" - delete")        
        Print(" - remoteCall")
        Print(" - computers")        
        Print(" - door - or use magicDoor()")
        Print(" - bank")        
        Print(" - encrypt")        
        Print(" - info")        
        Print(" - clear")
        Print(" - find(2) - Find entities")
        Print(" - floppy")                
        Print(" - slurp [now]")                
    else if cmd == "connect"
        string connectionName = Input("Name: ")
        id = Connect(connectionName)
    else if cmd == "connect -v"
        Print(GetConnections())
    else if cmd == "store"
        string key = Input("Key: ")
        string data = Input("Data: ")
        SaveMemory(key, data)
        Print("Data was saved.")
    else if cmd == "restore"
        string key = Input("Key: ")
        Print(LoadMemory(key))
    else if cmd == "list"
        var memories = GetMemories()
        Print("Memories stored: " + Count(memories))
        loop x in memories
            Print(x + " ..... " + LoadMemory(x) )
        end
        DisplayArray(memories,1)
    else if cmd == "delete"
        Print("Enter the memory key to delete: ")
        var delete_key = Input("...")
        EraseMemory(delete_key)
        Print(delete_key + " has been deleted.")        
    else if cmd == "remoteCall"
        string fnName = Input("Function name: ")
        RemoteFunctionCall(id, fnName, [])
    else if cmd == "computers"
        listComputers()
        Print("")
        Print("Enter computer nickname(key)")
        var nickname = Input(": ")
        Print("Enter computer name")
        var pcName = Input(": ")
        storeComputer(nickname,pcName)
    else if cmd == "door"
        doorUI()
    else if cmd == "bank"
        BankUI()
    else if cmd == "encrypt"
        EncryptUI()         
    else if cmd == "info"
        Info()  
    else if cmd == "clear"
        ClearText()
     else if cmd == "find"
        findUI()
     else if cmd == "find2"
        findNearby()
    else if cmd == "floppy"
        BootFromFloppy()
    else if cmd == "slurp"
        SlurpUI()
    else if cmd == "slurp now"
        Slurp()
    else
        Print("Can't understand command " + cmd)
        Print("Enter h for help.")
    end #if cmd == 
    Sleep(1)
end #loop (endless)
end #os() function


void Bar()
    Print("===================")
end



########################################################

void doorUI()
    Print("")
    Print("*******************")
    listDoors()
    string cmd = Input("(U)nlock door by name or (S)et door destination by menu")
    if cmd == 'U' or cmd == 'u'
        Print("Enter target door: ")
        var target = Input("")
        Unlock(target) # Direct Unlock
        storeDoor(target,'?')
        #crackDoor(target)
    else if  cmd == 'S' or cmd == 's'
        #Make selection from menu
        array doorNames = getStoredDoorNames()
        var doorName = DisplayArray(doorNames,1)
        SaveMemory('doorDestination', doorName)
    else 
        Print("Invalid Selection")
    end 
end


string getDoorDestination()
    return LoadMemory('doorDestination')
end


string getPortalDoor()
    return LoadMemory('doorPortal')
end


string togglePortalDoor()
    var portal = LoadMemory('doorPortal')
    if portal == 'true'
        SaveMemory('doorPortal','false')
    else
        SaveMemory('doorPortal','true')
    end
    return LoadMemory('doorPortal')
end


bool crackDoor(string target)
   var id = Connect(target)
    if id < 0
        Print("Failed to connect")
        return false
    else    
        loop x from 0 to 99999
            if IsKeyPressed("up")
                Bar()
                break
            end #if KeyPressed
            Print("Trying code: " + x)
            var success = id.Unlock(x)
            if success
                Print("Unlocked!")
                Print("*******************")
                storeDoor(target,x)
                break
            end #if success
        end #loop codes
    end #if id
end #crackDoor()

########################################################

void FloppyReader()
    ClearText()
    DisplayGraphics()
    Info()
    Print("Floppy data reader")
    Print("==================")
    Sleep(1)

    if HasFloppy()
        Print("")
        Print("Data on floppy:")
        Print("")
        var allData = LoadData()
        loop data in allData
            Print(data)
            Sleep(0.75)
        end
        Print("--------------")
    else
        Print("Please insert floppy...")
    end
end


########################################################


void Ping(string name)
    var id = Connect(name)
    id.Ping()
end

# Does this computer even have a monitor?! // Typo1337
#var n = Input("Ping computer with name: ")
#Ping(n)

#####

void BankUI()
#ClearText()
Print("*****************")

var bank = Connect("FinanceComputer")
var user = Input("User: (blank for self or list) ")
    if user==""
        user = GetUser()
    else if user == "list"
        #list all bank accounts
        var keys = bank.GetMemories()
        Print("Hold spacebar to advance list")
        Print("Bank Memories: " + Count(keys) )
        loop x in keys
            Print(x + " has " + bank.LoadMemory(x) )
            loop
                if IsKeyPressed('space')
                Sleep(0.1)
                break
                end
            end
        end
    end
    number balance = bank.GetBalanceForPerson(user)
    Print("Current Balance for " + user + " is : $" + balance)    
    Print("")
    
var amount = Input("Transfer Amount ($):")
bank.ChangeBalance(user, amount)

Print("Transaction completed.")
Print("*****************")
Print("")
end #BankUI()

##########################################

void ShowThing()
    Color(1,1,0)
    Line(300,0,300,600)
    DisplayGraphics()
end

number Circle(number radius)
    return radius * radius * 31.4159
end


void CircleUI()
   number radius = Input("Enter Circle Radius: ")
   Print("Circle Area = " + Circle(radius)  ) 
   Sleep(4)
end

void EncryptUI()
    ClearText()
    string s = Input("Enter key: ")
    number k = CharToInt(s[0])
    Print("Enter message:")
    string message = Input("")
    string encrypted = ""
    loop c in message
        if c == " "
            encrypted += " "
        else
            var sum = Mod(k + CharToInt(c), 26)
            #Print("sum for " + c + " = " + sum)
            var c2 = IntToChar(sum)
            encrypted += c2
        end #if c
    end #loop c
    Print("Encrypted:")
    Print("------------")
    Print(encrypted)
    Print("------------")
    Sleep(4)
end #EncryptUI()

##########################################
#Store arrays into memory!

##########################################
## Created by Erful and shared on Steam ##
##########################################

# CHAR REFERENCE:
# -64 !"#$%&'()*+,-./0123456789:;<=>?@ -65 -> SPACE " "
# -32 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`  29 -> "~"
#  0 abcdefghijklmnopqrstuvwxyz{|}~     -1,<65,>29 -> UNUSED

# SPECIAL CHARS (only used by these functions)
# 64 array


void SaveMemoryPlus(string key, var value)
    string type = Type(value)
    if type == "array"
        SaveMemoryArray(key, value)
    else if type == "unknown"
        # only "unknown" type known is automatic array index,
        # so we cast it as number (if not, error)
        number aux = value
        SaveMemory(key, aux)
    else
        SaveMemory(key, value)
    end
end


var LoadMemoryPlus(string key)
    var value = LoadMemory(key)
    if value == IntToChar(64)
        return LoadMemoryArray(key)
    else
        return value
    end
end


void EraseMemoryPlus(string key)
    if HasMemory(key)
        if LoadMemory(key) == IntToChar(64)
            EraseMemoryArray(key)
        else
            EraseMemory(key)
        end
    end
end


void SaveMemoryArray(string key, array a)
    EraseMemoryPlus(key)
    string subKey = IntToChar(64) + key + IntToChar(64)
    SaveMemory(key, IntToChar(64))
    number i = 0
    loop GetIndexes(a)
        SaveMemoryPlus(subKey + "k" + i, @)
        SaveMemoryPlus(subKey + "v" + i, a[@])
        i++
    end
end


array LoadMemoryArray(string key)
    string subKey = IntToChar(64) + key + IntToChar(64)
    array result = []
    number i = 0
    loop
        if !HasMemory(subKey + "k" + i)
            break
        end
        
        # no need of LoadMemoryPlus 'cause key can't be array
        var key = LoadMemory(subKey + "k" + i)
        var value = LoadMemoryPlus(subKey + "v" + i)
        
        result[key] = value
        i++
    end
    return result
end


void EraseMemoryArray(string key)
    string subKey = IntToChar(64) + key + IntToChar(64)
    number i = 0
    loop
        if !HasMemory(subKey + "k" + i)
            break
        end
        
        EraseMemory(subKey + "k" + i)
        EraseMemoryPlus(subKey + "v" + i)

        i++
    end    
end


######################################## 
#Examples

#From home computer
#array names = ["Computer_Name_1", "Computer_Name_2", "Computer_Name_3"]
#SaveMemoryPlus("Known Computers", names)


#From a remote computer
#string base = "HanksSteeringComputer" #"your_remote_base_computer"
#array names
#var connection = Connect(base) 
#names = connection.LoadMemoryPlus("Known Computers")
#Append(names, Name()) # adding current computer name to the array
#connection.SaveMemoryPlus("Known Computers", names)

##########################################
#^ Created by Erful and shared on Steam ^#
##########################################

##########################################
# String functions
string substring(inString,start_index,stop_index)
    if stop_index == -1  #go to end
        stop_index = Count(inString) - 1
    end

    #Error Checking 
    
    if (start_index >= stop_index)
        Print("ERROR: start_index >= stop_index!")
        break
    else if (stop_index >= Count(inString) )
        Print("ERROR: stop_index larger than string!")
        break
    end
    #Generate substring
    string outString = ""
    loop x from start_index to stop_index
        outString= outString + inString[x]
    end
    return outString
end

bool hasPrefix(inString,prefix)
    number sizePrefix = Count(prefix) - 1
    string test_prefix = substring(inString,0,sizePrefix)
    return test_prefix == prefix
end

string removePrefix(inString,prefix_size)
    return substring(inString,prefix_size,-1)
end


string repeatString(inString,n_repeats)
    string outString = ""
    loop x from 1 to n_repeats
        outString = outString + inString
    end
    return outString
end

var DisplayArray(array list, number linesPerRecord)
    #Use up/down to navigate array one element at a time
    #showing element line numbers
    #pressing "space" should save the current element
    #to the "sel" memory key, and break the loop.
    #Pressing right should display 5 next lines,
    #Pressing left should display 5 previous lines.

    #In addition to placing the array element into the "sel" key,
    #the array element will be returned by this function.
    number totalLines = Count(list)
    number totalRecords = totalLines / linesPerRecord
    number maxRecordIndex = totalRecords - 1
    number maxLineIndex = linesPerRecord - 1
    number remainderCheck = Mod(totalLines, linesPerRecord)
    number loopDelay = 0.1
    #Error Checking
    if remainderCheck != 0
        Print("Error in linesPerRecord, remainder= " + remainderCheck)
        return "Error: linesPerRecord had remainder"
    end #if remainderCheck
    if linesPerRecord<1 or linesPerRecord>totalLines
        Print("Error in size of linesPerRecord")
        return "Error: linesPerRecord out of scope"
    end #if linesPerRecord out of scope

    number x = 0 #RecordIndexCounter
    bool continueLoop = true #use to escape loopRecords
    #loop x from 0 to maxRecordIndex
    loop #do-until(continueLoop == false)
        
        PrintS(x +" - ") #Numer the records starting from 0
        loop lineIndex from 0 to maxLineIndex
            Print(list[x*linesPerRecord + lineIndex])
        end #loop lines(inRecords)

        #After printing the Record, wait  for a keypress:
        loop #keypress loop
            if IsKeyPressed("up")
               #Error Check
                if x>0
                    x--
                end
                Sleep(loopDelay)                
                break
            else if IsKeyPressed("down")
                #Error Check
                if x<maxRecordIndex
                    x++
                end
                Sleep(loopDelay)                
                break
            else if IsKeyPressed("space")
                continueLoop = false
                break
            end #if KeyPressed
        end #keypress loop

        if continueLoop == false
            #do things, then
            SaveMemory("sel",list[x*linesPerRecord + maxLineIndex]) #grab last line
            return list[x*linesPerRecord + maxLineIndex]
            break
        end #if/loop    
    end #loopRecords - do-until(continueLoop == false)

end #DisplayArray(array list, number linesPerRecord)


array stringDelimiter(string cmd,string delimiter)
#Should take a string of delimiter separated elements and
#output elemements as an array.
#Eg: cmdString = "find Monad", delimiterString = " "
#Array output=["find","Monad"]
#The first element coudl be used as the command,
#then Remove could extract the first element of the array
#and the rest could be passed to a function as the argument.
    bool lastCharWasDelimiter = false
    number outputIndex = 0
    array outputArray = []
    string thisWord = ''
    number length = Count(cmd)
    loop char in cmd
        if char != delimiter
            lastCharWasDelimiter = false
            thisWord = thisWord + char
            #Append(thisWord,char)
        else
            if !lastCharWasDelimiter
                Append(outputArray,thisWord)
                thisWord = ''
                outputIndex++
            end
            lastCharWasDelimiter = true
        end
    end
    Append(outputArray,thisWord)
    return outputArray
end #stringDelimiter()



##########################################
# Database Functions
bool storeDoor(doorName,doorCode)
# before storing the door name, verify 
# that it can be connected to it. If not, 
# return bool = false.
# Also, doorCode should be -1 if unknown.

# Check that door exists
var conDoor = Connect(doorName)
    if conDoor < 0
        Print("Door name invalid.")
        return false
    end
# HanksSteeringComputer will be the server,
# so any other computer should connect to it.
    string serverName = "HanksSteeringComputer"
    string key_name = "!d_" + doorName
    if (Name() == serverName)
        SaveMemory(key_name,doorCode)
    else
        var conID = Connect(serverName)
        conID.SaveMemory(key_name,doorCode)
        return true
    end
end

array getStoredDoorNames()
    array storedDoorNames = []
    string code = "!d_"
    var memKeys = GetMemories()
    loop doorName in memKeys
        if hasPrefix(doorName,code)
            Append(storedDoorNames,removePrefix(doorName,3))
        end
    end
    return storedDoorNames
end

void listDoors()
    string serverName = "HanksSteeringComputer"
    string code = "!d_"
    var memKeys
    if (Name() == serverName)
        memKeys = GetMemories()
        loop x in memKeys
            if hasPrefix(x,code)
                Print(removePrefix(x,3) + " ... " + LoadMemory(x) )
            end
        end
        Print("EOF")
    else
        var conID = Connect(serverName)
        memKeys = conID.GetMemories()
        loop x in memKeys
            if hasPrefix(x,code)
                Print(removePrefix(x,3) + " ... " + conID.LoadMemory(x) )
            end
        end
        Print("EOF")
    end
end 

bool storeComputer(nickname,computerName)
# before storing the computer name, verify 
# that it can be connected to it. If not, 
# return bool = false.

# Check that computer exists
if Name() == computerName 
    #continue
else
    var conComp = Connect(computerName)
    if conComp < 0
        Print("Computer name invalid.")
        return false
    end
end
# HanksSteeringComputer will be the server,
# so any other computer should connect to it.
    string serverName = "HanksSteeringComputer"
    string key_name = "!c_" + nickname
    if (Name() == serverName)
        SaveMemory(key_name,computerName)
    else
        var conID = Connect(serverName)
        conID.SaveMemory(key_name,computerName)
        return true
    end
end

void listComputers()
    string serverName = "HanksSteeringComputer"
    string code = "!c_"
    var memKeys
    number i = 0
    if (Name() == serverName)
        memKeys = GetMemories()
        loop x in memKeys
            if hasPrefix(x,code)
                PrintS(i +"-")
                Print(removePrefix(x,3) + " ... " + LoadMemory(x) )
                i++
            end
        end
        Print("EOF")
    else
        var conID = Connect(serverName)
        memKeys = conID.GetMemories()
        loop x in memKeys
            if hasPrefix(x,code)
                Print(i +"-")
                Print(removePrefix(x,3) + " ... " + conID.LoadMemory(x) )
                i++
            end
        end        
        Print("EOF")        
    end
end 

array getComputers()
    array computerData = []    
    string serverName = "HanksSteeringComputer"
    string code = "!c_"
    var memKeys
    number i = 0
    if (Name() == serverName)
        memKeys = GetMemories()
        
        loop x in memKeys
            if hasPrefix(x,code)
                computerData[i*2] = removePrefix(x,3)
                computerData[i*2+1] = LoadMemory(x)
                i = i + 1
            end #if hasPrefix
        end
        return computerData
    else
        var conID = Connect(serverName)
        memKeys = conID.GetMemories()
        loop x in memKeys
            if hasPrefix(x,code)
                computerData[i*2] = removePrefix(x,3) 
                computerData[i*2+1] = conID.LoadMemory(x)
                i = i + 1
            end #if hasPrefix
        end        
        return computerData
    end
end 

bool IsFriend(string name)
    array globalFriends = ["Pixie","Yulian","Fib","Frank","Ivan"]
    Append(globalFriends,"Sebastian")
    array globalEnemies = ["Monad","Police","Dave","Svante"]
    if IsUniqueIn(name,globalFriends) #isn't in frineds
        return False #not frined
    else
        return True #friends
    end #if
end #IsFriend()


##########################################
void SlurpUI()
    DisconnectAll()
    # Form array of computer connections
    # Allow navigation and selection
    # Connect to ONE computer and Slurp()
    array compData = getComputers()
    number numComps = Count(compData)/2
    number maxIndex = numComps - 1
    var id = -1
    var i
    loop
        # Show list of computer nicknames
        loop Range(0, maxIndex)
            PrintS(@ + '-' + compData[@*2] + '  ')
            if Mod(@, 4) == 3 or @ == maxIndex
                Print(" ")
            end
        end
        i = Input("Select hosts or (Q)uit = [0..."+maxIndex+"] : ")
        if i == "q" or i == "Q"
            return #exit loop
        else if i<0 or i>= numComps
            Print("out of range")
        else # Display host!
            Print(compData[i*2])  #nickname+prefix
            Print(compData[i*2+1])#name
            string c = Input("(S)lurp, (D)elete, (N)either, or (Q)uit? ")
            if c == "s" or c == "S"
               id =  Connect(compData[i*2+1])
                Print("Connections: "+ GetConnections())
                Sleep(1)
                Slurp()
            else if c == "d" or c == "D"
                Print("Delete function not implemented.")
            else if c == "q" or c == "Q"
                return
            else
                # must be (N)either, keep looping.
            end
#if input
        end
#if host
    end #loop
end #SlurpUI()
          
#########################################
# Log Functions

void StoreLog(string message)
    #Store in memory with time stamp.
    Print(message)  #Temporary Solution
end #StoreLog()



void DisplayLogs()
    #Once Logs are stored rather than displayed,
    #this will output

end #DisplayLogs()



#########################################
# Find Stuff
void findUI()
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)
    Bar()
    Print("Enter Name to Find: ")
    var name  = Input(">")
    var location = find.GetRoom(name)
    var action = find.GetAction(name)
    Print("Name: " + name)
    Print("Location: " + location)
    Print("Action: " + action)
    #GetPeople()
    #GetThingsOfType( type )
    #GetPosition( name )
    #GetAction( name )
    #GetRoom( name )
    #GetThingsInRoom( roomName )
    #GetThingsOfType( type )
    #GetAllRooms()
    #GetTypeOfThing( name )
end

void findNearby()
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)
    Bar()
    #find person or object
    Print("Enter Name to Find: ")
    var name  = Input(">")
    var location = find.GetRoom(name)
    var action = find.GetAction(name)
    Print("Name: " + name)
    Print("Location: " + location)
    Print("Action: " + action)
    #store array of nearby objects
    array objects = find.GetThingsInRoom(location)
    array types = []
        loop @ in objects
            if IsUniqueIn(find.GetTypeOfThing(@),types)
                Append(types, find.GetTypeOfThing(@))
            end #if IsUnique
        end #loop in objects
    #display types of objects in room
        #requires ability to find unique array entries
    Print("Choose an object type to list: ")
    #Print(types)
    #Take Input on which object type to list
    #var selType = Input(">")
    var selType = DisplayArray(types,1)
    #List all objects in room of specified type
        #use fancy menu,allows selection
        #eg DisplayArray(array list,number linesPerRercord)
    array thingsOfType = GetThingsInRoomOfType(location,selType)
    Print("Filtered list goes here...")
    #Print(thingsOfType)
    var sel = DisplayArray(thingsOfType,1)
    if find.GetTypeOfThing(sel) == "computer"
        var selPC = Connect(sel) #Create connection to this computer
        var fly = Input("Do you want to slurp to this computer?")
            if fly == "Y" or fly == "y"
                Slurp()
            else
                Print("Computer name is in the sel memory key")
            end #if fly
    else if find.GetTypeOfThing(sel) == "door"
        SaveMemory('doorDestination',sel)
        storeDoor(sel,'?')
        Print("Door Name is in the doorDestination key")
    end #selected a computer
    #selected object name stored in "sel" key
        #if sel key contains a computer name,
        #it should be displayed on the Slurp menu
end #findNearby()

bool IsUniqueIn(var element, array list)
    #should evaluate whether ANY of the elements of list == element
    number sizeList = Count(list)
    bool isUnique = true #start assuming unique
    loop @ in list
        if @ == element
            isUnique = false
            break
        end
    end #loop in list
    return isUnique
end #IsUniqueIn()

array GetThingsInRoomOfType(string room, string type)
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)
    array thingNamesAll = find.GetThingsInRoom(room)
    array thingNamesOfType = []
    #populate arrays with filtered list
    loop @ in thingNamesAll
        if find.GetTypeOfThing(@) == type
            Append(thingNamesOfType, @)
        end #if type
    end #loop in all things
    return thingNamesOfType
end #GetThingsInRoomOfType()

array magicDoor()
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)
    array doorsUnlocked = []
    var  sebRoom = find.GetRoom("Sebastian")
    var sebPos = find.GetPosition("Sebastian")
    array things = find.GetThingsInRoom(sebRoom)
    loop @ in things
        if find.GetTypeOfThing(@) == "door"
            if Unlock(@)
                Append(doorsUnlocked, @)
            else
                Append(doorsUnlocked, "Failed: " + @)
            end #if Unlocked
        end #if Door   
    end #loop in things
    return doorsUnlocked
end #magicDoor()

array magicDefense() #Call from drinks or credit cards
    #Find all computers in the room Sebastian is in.
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)
    string sebRoom = find.GetRoom("Sebastian")
    array roomComputers = GetThingsInRoomOfType(sebRoom,"computer")
Print("Got To roomComputers: " + roomComputers)
    #Search for a computer with ZapPerson() function
    string compName = "" #Almost superfluous
    var compConnection = -1
    bool foundZap = False #Initial assumption
    if Count(roomComputers) > 0 
        loop @ in roomComputers
            compConnection = Connect(@)
            if compConnection.HasFunction("ZapPerson")
                Print("Found Zapper: "+@)
                foundZap = True
                compName = @
                break #exit this loop
            end #if HasFunction()
        end #loop roomComputers
    end #if Count>0
    #If ZapPerson computer is found...
    #Find every character NOT on "safe list" in room
    #Zap every unsafe person in the room.
    if foundZap
        array roomCharacters = GetThingsInRoomOfType(sebRoom,"character")
        array roomEnemies = []
        loop @ in roomCharacters
            if IsFriend(@)
                #do nothing
            else
                Append(roomEnemies, @) 
                compConnection.ZapPerson(@)
                #compConnection.MovePerson(@, compName ) #Move to zapping computer?
            end #IsUnique
        end #loop in roomCharacters
        Append(roomEnemies,compName) #Show computer name at end of list
        #StoreLog("Zap report: "+roomEnemies)
        return roomEnemies #gives something
    else
        #No computer found to ZapPerson
    end #if foundZap
end #magicDefense()

array magicHack()
    #Find computers with OnHack() and ZapPerson(), 
    #And get them to crash out with invalid function calls.
    #Will this work?
end #magicHack()

void findAll()
    #Browse all Characters
    #Produce list of all object types
    #Produce a list of all rooms
    #Sort above lists alphabetically
    #Store each array into memory using fancy functions
end #findAll()



#GetPeople()
#GetThingsOfType( type )
#GetPosition( name )
#GetAction( name )
#GetRoom( name )
#GetThingsInRoom( roomName )
#GetThingsOfType( type )
#GetAllRooms()
#GetTypeOfThing( name )

# function with command line arguments
void find(string commandString)
    array cmdArray = parseCommand(commandString) 


end

#########################################

# Command Parser
# Are arrays of arrays possible?
array parseCommand(string commandString)
#Output will begin with command name, then -options, then arguments
#Simply split with spaces as a delimiter
    array commandArray = stringDelimiter(commandString,' ')
    return commandArray
end


##########################################


void loadConnections()
#slurpLocations

#storeComputer("Hank", "HanksSteeringComputer")
storeComputer("Hotel_Outside", "Hotel_Exterior_CurcuitLocker_1")
storeComputer("HackWorld", "Lowenbrau")
storeComputer("PoliceExterior", "PoliceOffice_Exterior_FlatScreen_FlatComputerScreen_1")
storeComputer("HackFuseboxPlaza", "Plaza_FuseBox_Poor_FuseBox_1")
storeComputer("LargeComputer", "LargeComputerL3_LargeComputerL3")
storeComputer("Hotel_Server_Basement", "Hotel_ServerBasement_LargeComputerL3_LargeComputerL3_1")
storeComputer("Factory_ServerRoom", "Factory_ServerRoom_LargeComputerL3_LargeComputerL3_1")
storeComputer("Franks_Sink","Frank_Room_Poor_WaterTap_Poor_WaterTap_1")
#Connect("Seaschack1_LargeComputerL3_LargeComputerL3_1")

end
