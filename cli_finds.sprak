var h=Connect('HanksSteeringComputer')

ClearText()

array ray = stringDelimiter('h',' ')
Print(ray)
Print(ray[0])



os()


void os()
    ClearText()
    PlaySound("Coin 1")
    loop
        string cmdString = Input("> ")
        #array cmdArray = parseCommand(cmdString)
        array cmdArray = stringDelimiter(cmdString,' ')
        Print('Menu Parse Debug: ' + cmdArray)
        string cmd = cmdArray[0]
        Print('Menu Cmd: ' + cmd)
        if cmd == 'help' or cmd == 'h'
            Print('find, find help or find -h for help')
            Print('setup, sets up the screen size')
            Print('browse, browse -h, view memory')
            Print('info, show system information')
            Print('clear, clear screen')
        else if cmd == 'find'
            find(cmdString)
        else if cmd == 'setup'
            setupScreenSize(cmdString)
        else if cmd == 'browse'
            browseMemory()
        else if cmd == 'info'
            Info()
        else if cmd == 'clear'
            ClearText()
        else
            Print('Command not recognized. Type help if needed')
        end

   end
end



#########################################


#GetPeople()
#GetThingsOfType( type )
#GetPosition( name )
#GetAction( name )
#GetRoom( name )
#GetThingsInRoom( roomName )
#GetThingsOfType( type )
#GetAllRooms()
#GetTypeOfThing( name )

# function with command line arguments
void find(string command)
    string gcFindServer = "PoliceOfficeInterior_MinistryOfficeWorkstationComputer_1"
    var find = Connect(gcFindServer)

    array cmdArray = stringDelimiter(command,' ')
    number cmdSize = Count(cmdArray)
    Print('FIND CLI ' + cmdArray)
#DEBUG
    string findOption = 'showHelp' #Default
    #Show help if no option is given, or option is -h or help
    if cmdSize<=1
        findOption = 'showHelp'
    else if cmdArray[1] == '-h' or cmdArray[1] == 'help'
        findOption = 'showHelp'
    else if cmdSize > 1 and cmdArray[1] == '-person'
        findOption = 'findAllPeople'
    else if cmdSize > 2
        if cmdArray[1] == '-person' and cmdArray[2] == 'all'
            findOption = 'findAllPeople'
        end
    end

    if findOption == 'showHelp'
        Print('find -h for this help screen ')
        Print('find -person all / View all people')
        Print('find -person <personName>')
        Print('find -objectWith <personName>')
        Print('find -objectIn <roomName>')
        Print('find -type <objectType>')
        Print('find -room <roomName>')
        Print('Eg find -person Pixie')
        Print('Stores room to @r, person to @p, ...')
        Print('computer to @c, door to @d, ...')
        Print('location to @l, object to @o, ...')
        Print('type to @t')
    else if findOption == 'findAllPeople'
        Print('find all people')
        array allPeople = find.GetPeople()
        var sel = browseArray(allPeople)
        h.SaveMemory('@p',sel)
    else
        Print('Unidentified command.  Try find -h to for help.')
    end

end


####
void browseMemory()
    # Use browseArray() to view and manage memory entries
    number indexSelection =  -1
    array memoryKeys = h.GetMemories()
    indexSelection = browseArray(memoryKeys)
    string selectedKey = memoryKeys[indexSelection]
    memoryKeyOptions(selectedKey)

end

bool memoryKeyOptions(string selectedKey)
    # Provide options for acting on a memory key
    # Depending on if it is a door, computer, etc
    PrintS('Selected Entry:  ')
    Print(selectedKey)
    Print(h.LoadMemory(selectedKey))
    Print('Desired Action on memory')
    PrintS('(Q)uit (D)elete (R)ename (C)opy ')
    Print('(S)lurp (D)oor')
    string cmd = Input('Command> ')
    if cmd == 'Q'
    else if cmd == 'D'
        h.EraseMemory(selectedKey)
    else if cmd == 'R'
        string newKeyName = Input('New Key Name: ')
        h.SaveMemory(newKeyName,h.LoadMemory(selectedKey))
        h.EraseMemory(selectedKey)
    else if cmd == 'C'
        string newKeyName = Input('New Key Name: ')
        h.SaveMemory(newKeyName,h.LoadMemory(selectedKey))
    else if cmd == 'S'
        var thisComputer = Connect(h.LoadMemory(selectedKey))
        h.SaveMemory('@c',h.LoadMemory(selectedKey))
        Slurp()
    end


    return true
end


number browseArray(array inputArray)
# Input an array, allow scrolling through array, return selection index.
    number indexSelection = -1 # invalid array selection
    # Scroll Line by Line

    if(!HasMemory('screenRows'))
        setupScreenSize('commandGoesHere')
    end
    number screenRows = LoadMemory('screenRows')
    Print('Screen Rows: ' + screenRows)

    number totalKeys = Count(inputArray)
    Print('TotalKeys: ' + totalKeys) # DEBUG
    number lastKeyIndex = (totalKeys - 1)
    number iCursor = 0

    # Buffer is indexing into the keys, starts with 0
    number bufferStart = 0
    number bufferStop = screenRows - 1
    if bufferStop > lastKeyIndex
        bufferStop = lastKeyIndex
    end
    bufferStop = bufferStop - 5 # Make room for cmd line

    displayBuffer(bufferStart,bufferStop,inputArray,iCursor)
# Control movement with keys
    number cursorShift = 0
    number bufferShift = 0
    loop
        bool keyPressed = false # Initial assumption
        if IsKeyPressed('down')
            cursorShift = 1
            keyPressed = true

        else if IsKeyPressed('up')
            cursorShift = -1
            keyPressed = true
        else if IsKeyPressed('right')
            cursorShift = 10
            keyPressed = true
        else if IsKeyPressed('left')
            cursorShift = -10
            keyPressed = true
        else if IsKeyPressed('space')
                break
        end

        if keyPressed
            # Logic to prevent running past end of array
            number arrayEndGap = lastKeyIndex - iCursor
            number arrayStartGap = 0 - iCursor
            if (cursorShift <  arrayStartGap)
                cursorShift = arrayStartGap
            end
            if (cursorShift >  arrayEndGap )
                cursorShift = arrayEndGap
            end
            # New iCursor position, within array bounds
            iCursor = iCursor + cursorShift
            # Logic to shift buffer by correct amount
            # should only shift when our iCursor extends beyond buffer bounds
            if (iCursor > bufferStop)
                bufferShift = iCursor - bufferStop
            else if (iCursor < bufferStart)
                bufferShift = iCursor - bufferStart
            else
                bufferShift = 0
            end
            bufferStart = bufferStart + bufferShift
            bufferStop  = bufferStop  + bufferShift
            displayBuffer(bufferStart,bufferStop,inputArray,iCursor)
        end # if keyPressed
    end
# loop

    indexSelection = iCursor 
    return indexSelection
end


void displayBuffer(number start, number stop, array values,number iCursor)
    ClearText()
    loop Range(start,stop)
        if @ == iCursor
            PrintS('>')
        else
            PrintS(' ')
        end
        PrintS(@ + '-')
        Print(values[@])
    end

end


void setupScreenSize(string command)
    loop Range(40,2)
        Print(@)
    end
    number maxRows = Input('1  Max number visible: ')
    SaveMemory('screenRows',maxRows)

    loop try in [1,2]
        loop x in [1,2,3,4,5,6,7]

            loop Range(1,10)
               if(@ == 10 || try == 1)
                  if (try == 1)

                      PrintS(x - 1)
                  else
                      PrintS(x)
                  end
               else
                 PrintS(@)
               end
          end
       end
       Print("")
    end
    number maxCols = Input('Max number visible: ')
    SaveMemory('screenCols',maxCols)
    return 0
end


# Command Parser
# Are arrays of arrays possible?
array parseCommand(string commandString)
#Output will begin with command name, then -options, then arguments
#Simply split with spaces as a delimiter
    array commandArray = stringDelimiter(commandString,' ')
    return commandArray

end

# String functions
string substring(inString,start_index,stop_index)
    if stop_index == -1  #go to end
        stop_index = Count(inString) - 1
    end

    #Error Checking

    if (start_index >= stop_index)
        Print("ERROR: start_index >= stop_index!")
        break
    else if (stop_index >= Count(inString) )
        Print("ERROR: stop_index larger than string!")
        break
    end
    #Generate substring
    string outString = ""
    loop x from start_index to stop_index
        outString= outString + inString[x]
    end
    return outString
end

bool hasPrefix(inString,prefix)
    number sizePrefix = Count(prefix) - 1
    string test_prefix = substring(inString,0,sizePrefix)
    return test_prefix == prefix
end

string removePrefix(inString,prefix_size)
    return substring(inString,prefix_size,-1)
end


string repeatString(inString,n_repeats)
    string outString = ""
    loop x from 1 to n_repeats
        outString = outString + inString
    end
    return outString
end

var DisplayArray(array list, number linesPerRecord)
    #Use up/down to navigate array one element at a time
    #showing element line numbers
    #pressing "space" should save the current element
    #to the "sel" memory key, and break the loop.
    #Pressing right should display 5 next lines,
    #Pressing left should display 5 previous lines.

    #In addition to placing the array element into the "sel" key,
    #the array element will be returned by this function.
    number totalLines = Count(list)
    number totalRecords = totalLines / linesPerRecord
    number maxRecordIndex = totalRecords - 1
    number maxLineIndex = linesPerRecord - 1
    number remainderCheck = Mod(totalLines, linesPerRecord)
    number loopDelay = 0.1
    #Error Checking
    if remainderCheck != 0
        Print("Error in linesPerRecord, remainder= " + remainderCheck)
        return "Error: linesPerRecord had remainder"
    end #if remainderCheck
    if linesPerRecord<1 or linesPerRecord>totalLines
        Print("Error in size of linesPerRecord")
        return "Error: linesPerRecord out of scope"
    end #if linesPerRecord out of scope

    number x = 0 #RecordIndexCounter
    bool continueLoop = true #use to escape loopRecords
    #loop x from 0 to maxRecordIndex
    loop #do-until(continueLoop == false)

        PrintS(x +" - ") #Numer the records starting from 0
        loop lineIndex from 0 to maxLineIndex
            Print(list[x*linesPerRecord + lineIndex])
        end #loop lines(inRecords)

        #After printing the Record, wait  for a keypress:
        loop #keypress loop
            if IsKeyPressed("up")
               #Error Check
                if x>0
                    x--
                end
                Sleep(loopDelay)
                break
            else if IsKeyPressed("down")
                #Error Check
                if x<maxRecordIndex
                    x++
                end
                Sleep(loopDelay)
                break
            else if IsKeyPressed("space")
                continueLoop = false
                break
            end #if KeyPressed
        end #keypress loop

        if continueLoop == false
            #do things, then
            SaveMemory("sel",list[x*linesPerRecord + maxLineIndex]) #grab last line
            return list[x*linesPerRecord + maxLineIndex]
            break
        end #if/loop
    end #loopRecords - do-until(continueLoop == false)

end #DisplayArray(array list, number linesPerRecord)


array stringDelimiter(string cmd,string delimiter)
#Should take a string of delimiter separated elements and
#output elemements as an array.
#Eg: cmdString = "find Monad", delimiterString = " "
#Array output=["find","Monad"]
#The first element coudl be used as the command,
#then Remove could extract the first element of the array
#and the rest could be passed to a function as the argument.
    bool lastCharWasDelimiter = false
    number outputIndex = 0
    array outputArray = []
    string thisWord = ''
    number length = Count(cmd)
    loop char in cmd
        if char != delimiter
            lastCharWasDelimiter = false
            thisWord = thisWord + char
            #Append(thisWord,char)
        else
            if !lastCharWasDelimiter
                Append(outputArray,thisWord)
                thisWord = ''
                outputIndex++
            end
            lastCharWasDelimiter = true
        end
    end
    Append(outputArray,thisWord)
    return outputArray
end #stringDelimiter()
